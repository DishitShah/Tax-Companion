{"ast":null,"code":"import AuthService from '../../services/authService';\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGOUT = 'LOGOUT';\nexport const loginUser = credentials => async dispatch => {\n  dispatch({\n    type: LOGIN_REQUEST\n  });\n  try {\n    const userData = await AuthService.login(credentials);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: userData\n    });\n    return {\n      success: true\n    };\n  } catch (error) {\n    var _error$response, _error$response$data, _error$response2, _error$response2$data;\n    dispatch({\n      type: LOGIN_FAILURE,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed'\n    });\n    return {\n      success: false,\n      message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Login failed'\n    };\n  }\n};\nexport const logoutUser = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};\nexport const resetPassword = email => async dispatch => {\n  dispatch({\n    type: 'RESET_PASSWORD_REQUEST'\n  });\n  try {\n    await AuthService.resetPassword(email);\n    dispatch({\n      type: 'RESET_PASSWORD_SUCCESS'\n    });\n    return {\n      success: true\n    };\n  } catch (error) {\n    dispatch({\n      type: 'RESET_PASSWORD_FAILURE',\n      payload: error.message\n    });\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n};","map":{"version":3,"names":["AuthService","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","loginUser","credentials","dispatch","type","userData","login","payload","success","error","_error$response","_error$response$data","_error$response2","_error$response2$data","response","data","message","logoutUser","logout","resetPassword","email"],"sources":["C:/Users/chira/OneDrive/Desktop/tax-companion-frontend/src/redux/actions/authActions.js"],"sourcesContent":["import AuthService from '../../services/authService';\r\n\r\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\nexport const LOGOUT = 'LOGOUT';\r\n\r\nexport const loginUser = (credentials) => async (dispatch) => {\r\n  dispatch({ type: LOGIN_REQUEST });\r\n  \r\n  try {\r\n    const userData = await AuthService.login(credentials);\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: userData\r\n    });\r\n    return { success: true };\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGIN_FAILURE,\r\n      payload: error.response?.data?.message || 'Login failed'\r\n    });\r\n    return { \r\n      success: false, \r\n      message: error.response?.data?.message || 'Login failed' \r\n    };\r\n  }\r\n};\r\n\r\nexport const logoutUser = () => (dispatch) => {\r\n  AuthService.logout();\r\n  dispatch({ type: LOGOUT });\r\n};\r\n\r\nexport const resetPassword = (email) => async (dispatch) => {\r\n  dispatch({ type: 'RESET_PASSWORD_REQUEST' });\r\n\r\n  try {\r\n    await AuthService.resetPassword(email);\r\n    dispatch({ type: 'RESET_PASSWORD_SUCCESS' });\r\n    return { success: true };\r\n  } catch (error) {\r\n    dispatch({ type: 'RESET_PASSWORD_FAILURE', payload: error.message });\r\n    return { success: false, message: error.message };\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,WAAW,MAAM,4BAA4B;AAEpD,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,MAAM,GAAG,QAAQ;AAE9B,OAAO,MAAMC,SAAS,GAAIC,WAAW,IAAK,MAAOC,QAAQ,IAAK;EAC5DA,QAAQ,CAAC;IAAEC,IAAI,EAAEP;EAAc,CAAC,CAAC;EAEjC,IAAI;IACF,MAAMQ,QAAQ,GAAG,MAAMT,WAAW,CAACU,KAAK,CAACJ,WAAW,CAAC;IACrDC,QAAQ,CAAC;MACPC,IAAI,EAAEN,aAAa;MACnBS,OAAO,EAAEF;IACX,CAAC,CAAC;IACF,OAAO;MAAEG,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA,EAAAC,gBAAA,EAAAC,qBAAA;IACdV,QAAQ,CAAC;MACPC,IAAI,EAAEL,aAAa;MACnBQ,OAAO,EAAE,EAAAG,eAAA,GAAAD,KAAK,CAACK,QAAQ,cAAAJ,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBK,IAAI,cAAAJ,oBAAA,uBAApBA,oBAAA,CAAsBK,OAAO,KAAI;IAC5C,CAAC,CAAC;IACF,OAAO;MACLR,OAAO,EAAE,KAAK;MACdQ,OAAO,EAAE,EAAAJ,gBAAA,GAAAH,KAAK,CAACK,QAAQ,cAAAF,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBG,IAAI,cAAAF,qBAAA,uBAApBA,qBAAA,CAAsBG,OAAO,KAAI;IAC5C,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAOd,QAAQ,IAAK;EAC5CP,WAAW,CAACsB,MAAM,CAAC,CAAC;EACpBf,QAAQ,CAAC;IAAEC,IAAI,EAAEJ;EAAO,CAAC,CAAC;AAC5B,CAAC;AAED,OAAO,MAAMmB,aAAa,GAAIC,KAAK,IAAK,MAAOjB,QAAQ,IAAK;EAC1DA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAyB,CAAC,CAAC;EAE5C,IAAI;IACF,MAAMR,WAAW,CAACuB,aAAa,CAACC,KAAK,CAAC;IACtCjB,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAyB,CAAC,CAAC;IAC5C,OAAO;MAAEI,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdN,QAAQ,CAAC;MAAEC,IAAI,EAAE,wBAAwB;MAAEG,OAAO,EAAEE,KAAK,CAACO;IAAQ,CAAC,CAAC;IACpE,OAAO;MAAER,OAAO,EAAE,KAAK;MAAEQ,OAAO,EAAEP,KAAK,CAACO;IAAQ,CAAC;EACnD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}