{"ast":null,"code":"import AuthService from'../../services/authService';export const LOGIN_REQUEST='LOGIN_REQUEST';export const LOGIN_SUCCESS='LOGIN_SUCCESS';export const LOGIN_FAILURE='LOGIN_FAILURE';export const LOGOUT='LOGOUT';export const loginUser=credentials=>async dispatch=>{dispatch({type:LOGIN_REQUEST});try{const userData=await AuthService.login(credentials);dispatch({type:LOGIN_SUCCESS,payload:userData});return{success:true};}catch(error){var _error$response,_error$response$data,_error$response2,_error$response2$data;dispatch({type:LOGIN_FAILURE,payload:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Login failed'});return{success:false,message:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Login failed'};}};export const logoutUser=()=>dispatch=>{AuthService.logout();dispatch({type:LOGOUT});};export const resetPassword=email=>async dispatch=>{dispatch({type:'RESET_PASSWORD_REQUEST'});try{await AuthService.resetPassword(email);dispatch({type:'RESET_PASSWORD_SUCCESS'});return{success:true};}catch(error){dispatch({type:'RESET_PASSWORD_FAILURE',payload:error.message});return{success:false,message:error.message};}};export const registerUser=userData=>async dispatch=>{dispatch({type:'REGISTER_REQUEST'});try{const user=await AuthService.register(userData);dispatch({type:'REGISTER_SUCCESS',payload:user});return{success:true};}catch(error){dispatch({type:'REGISTER_FAILURE',payload:error.message});return{success:false,message:error.message};}};","map":{"version":3,"names":["AuthService","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","loginUser","credentials","dispatch","type","userData","login","payload","success","error","_error$response","_error$response$data","_error$response2","_error$response2$data","response","data","message","logoutUser","logout","resetPassword","email","registerUser","user","register"],"sources":["C:/Users/chira/OneDrive/Desktop/tax-companion-frontend/src/redux/actions/authActions.js"],"sourcesContent":["import AuthService from '../../services/authService';\r\n\r\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\nexport const LOGOUT = 'LOGOUT';\r\n\r\nexport const loginUser = (credentials) => async (dispatch) => {\r\n  dispatch({ type: LOGIN_REQUEST });\r\n  \r\n  try {\r\n    const userData = await AuthService.login(credentials);\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: userData\r\n    });\r\n    return { success: true };\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGIN_FAILURE,\r\n      payload: error.response?.data?.message || 'Login failed'\r\n    });\r\n    return { \r\n      success: false, \r\n      message: error.response?.data?.message || 'Login failed' \r\n    };\r\n  }\r\n};\r\n\r\nexport const logoutUser = () => (dispatch) => {\r\n  AuthService.logout();\r\n  dispatch({ type: LOGOUT });\r\n};\r\n\r\nexport const resetPassword = (email) => async (dispatch) => {\r\n  dispatch({ type: 'RESET_PASSWORD_REQUEST' });\r\n\r\n  try {\r\n    await AuthService.resetPassword(email);\r\n    dispatch({ type: 'RESET_PASSWORD_SUCCESS' });\r\n    return { success: true };\r\n  } catch (error) {\r\n    dispatch({ type: 'RESET_PASSWORD_FAILURE', payload: error.message });\r\n    return { success: false, message: error.message };\r\n  }\r\n};\r\n\r\nexport const registerUser = (userData) => async (dispatch) => {\r\n  dispatch({ type: 'REGISTER_REQUEST' });\r\n\r\n  try {\r\n    const user = await AuthService.register(userData);\r\n    dispatch({ type: 'REGISTER_SUCCESS', payload: user });\r\n    return { success: true };\r\n  } catch (error) {\r\n    dispatch({ type: 'REGISTER_FAILURE', payload: error.message });\r\n    return { success: false, message: error.message };\r\n  }\r\n};"],"mappings":"AAAA,MAAO,CAAAA,WAAW,KAAM,4BAA4B,CAEpD,MAAO,MAAM,CAAAC,aAAa,CAAG,eAAe,CAC5C,MAAO,MAAM,CAAAC,aAAa,CAAG,eAAe,CAC5C,MAAO,MAAM,CAAAC,aAAa,CAAG,eAAe,CAC5C,MAAO,MAAM,CAAAC,MAAM,CAAG,QAAQ,CAE9B,MAAO,MAAM,CAAAC,SAAS,CAAIC,WAAW,EAAK,KAAO,CAAAC,QAAQ,EAAK,CAC5DA,QAAQ,CAAC,CAAEC,IAAI,CAAEP,aAAc,CAAC,CAAC,CAEjC,GAAI,CACF,KAAM,CAAAQ,QAAQ,CAAG,KAAM,CAAAT,WAAW,CAACU,KAAK,CAACJ,WAAW,CAAC,CACrDC,QAAQ,CAAC,CACPC,IAAI,CAAEN,aAAa,CACnBS,OAAO,CAAEF,QACX,CAAC,CAAC,CACF,MAAO,CAAEG,OAAO,CAAE,IAAK,CAAC,CAC1B,CAAE,MAAOC,KAAK,CAAE,KAAAC,eAAA,CAAAC,oBAAA,CAAAC,gBAAA,CAAAC,qBAAA,CACdV,QAAQ,CAAC,CACPC,IAAI,CAAEL,aAAa,CACnBQ,OAAO,CAAE,EAAAG,eAAA,CAAAD,KAAK,CAACK,QAAQ,UAAAJ,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBK,IAAI,UAAAJ,oBAAA,iBAApBA,oBAAA,CAAsBK,OAAO,GAAI,cAC5C,CAAC,CAAC,CACF,MAAO,CACLR,OAAO,CAAE,KAAK,CACdQ,OAAO,CAAE,EAAAJ,gBAAA,CAAAH,KAAK,CAACK,QAAQ,UAAAF,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBG,IAAI,UAAAF,qBAAA,iBAApBA,qBAAA,CAAsBG,OAAO,GAAI,cAC5C,CAAC,CACH,CACF,CAAC,CAED,MAAO,MAAM,CAAAC,UAAU,CAAGA,CAAA,GAAOd,QAAQ,EAAK,CAC5CP,WAAW,CAACsB,MAAM,CAAC,CAAC,CACpBf,QAAQ,CAAC,CAAEC,IAAI,CAAEJ,MAAO,CAAC,CAAC,CAC5B,CAAC,CAED,MAAO,MAAM,CAAAmB,aAAa,CAAIC,KAAK,EAAK,KAAO,CAAAjB,QAAQ,EAAK,CAC1DA,QAAQ,CAAC,CAAEC,IAAI,CAAE,wBAAyB,CAAC,CAAC,CAE5C,GAAI,CACF,KAAM,CAAAR,WAAW,CAACuB,aAAa,CAACC,KAAK,CAAC,CACtCjB,QAAQ,CAAC,CAAEC,IAAI,CAAE,wBAAyB,CAAC,CAAC,CAC5C,MAAO,CAAEI,OAAO,CAAE,IAAK,CAAC,CAC1B,CAAE,MAAOC,KAAK,CAAE,CACdN,QAAQ,CAAC,CAAEC,IAAI,CAAE,wBAAwB,CAAEG,OAAO,CAAEE,KAAK,CAACO,OAAQ,CAAC,CAAC,CACpE,MAAO,CAAER,OAAO,CAAE,KAAK,CAAEQ,OAAO,CAAEP,KAAK,CAACO,OAAQ,CAAC,CACnD,CACF,CAAC,CAED,MAAO,MAAM,CAAAK,YAAY,CAAIhB,QAAQ,EAAK,KAAO,CAAAF,QAAQ,EAAK,CAC5DA,QAAQ,CAAC,CAAEC,IAAI,CAAE,kBAAmB,CAAC,CAAC,CAEtC,GAAI,CACF,KAAM,CAAAkB,IAAI,CAAG,KAAM,CAAA1B,WAAW,CAAC2B,QAAQ,CAAClB,QAAQ,CAAC,CACjDF,QAAQ,CAAC,CAAEC,IAAI,CAAE,kBAAkB,CAAEG,OAAO,CAAEe,IAAK,CAAC,CAAC,CACrD,MAAO,CAAEd,OAAO,CAAE,IAAK,CAAC,CAC1B,CAAE,MAAOC,KAAK,CAAE,CACdN,QAAQ,CAAC,CAAEC,IAAI,CAAE,kBAAkB,CAAEG,OAAO,CAAEE,KAAK,CAACO,OAAQ,CAAC,CAAC,CAC9D,MAAO,CAAER,OAAO,CAAE,KAAK,CAAEQ,OAAO,CAAEP,KAAK,CAACO,OAAQ,CAAC,CACnD,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}